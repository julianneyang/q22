path <- "C:/Users/Jacobs Laboratory/Documents/JCYang/Raw_Data_March2022SeqRun/" # CHANGE to the directory containing the fastq files
list.files(path)
path <- "C:/Users/Jacobs Laboratory/Documents/JCYang/Raw_Data_March2022SeqRun/Q22_FastQ/" # CHANGE to the directory containing the fastq files
list.files(path)
# Extract sample names, identify forward and reverse reads
fnFs <- sort(list.files(path, pattern="R1_001.fastq.gz", full.names = TRUE))
path <- "C:/Users/Jacobs Laboratory/Documents/JCYang/Raw_Data_March2022SeqRun/Q22_FastQ/" # CHANGE to the directory containing the fastq files
list.files(path)
# Extract sample names, identify forward and reverse reads
fnFs <- sort(list.files(path, pattern="R1_001.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="R2_001.fastq.gz", full.names = TRUE))
sample.names <- sapply(strsplit(basename(fnFs), ".fastq"), `[`, 1)
# Assess quality of samples by position, consider length to truncate at (enterred under truncLen); run one line at a time
plotQualityProfile(fnFs[1:2]) #quality score under 30 is bad; these are all good quality
library(dada2)
path <- "C:/Users/Jacobs Laboratory/Documents/JCYang/Raw_Data_March2022SeqRun/Q22_FastQ/" # CHANGE to the directory containing the fastq files
list.files(path)
# Extract sample names, identify forward and reverse reads
fnFs <- sort(list.files(path, pattern="R1_001.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="R2_001.fastq.gz", full.names = TRUE))
sample.names <- sapply(strsplit(basename(fnFs), ".fastq"), `[`, 1)
# Assess quality of samples by position, consider length to truncate at (enterred under truncLen); run one line at a time
plotQualityProfile(fnFs[1:2]) #quality score under 30 is bad; these are all good quality
plotQualityProfile(fnRs[1:2])
# Create filtered dataset
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))  # creates output filenames
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))  # creates output filenames
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(240,140),
maxN=0, maxEE=c(5,5), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=FALSE)
# maxEE controls the maximum number of expected errors (i.e. read quality), second number is for filtering of reverse reads
out
# Generate model for errors in the sequencing run
errF <- learnErrors(filtFs, multithread=TRUE)   # can adjust parameters nbases (default 100 million) to increase amount of sequence data used to assess errors
#107679550 total bases in 391562 reads from 14 samples will be used for learning the error rates.
errR <- learnErrors(filtRs, multithread=TRUE)
#102263175 total bases in 454503 reads from 16 samples will be used for learning the error rates.
plotErrors(errF, nominalQ=TRUE)  # visually check if plotted error models represented by black lines fit the observed datapoints (estimates assuming most abundance sequences don't have errors); red line shows estimated error rates from Q scores
plotErrors(errR,nominalQ=TRUE)
# Identical sequences combined to reduce processing time
derepFs <- derepFastq(filtFs, verbose=TRUE)
derepRs <- derepFastq(filtRs, verbose=TRUE)
names(derepFs) <- sample.names
names(derepRs) <- sample.names
# Determine amplicon sequence variants (ASVs) from each read; note: may need to use a different workflow if many files and too little RAM
dadaFs <- dada(derepFs, err=errF, multithread=TRUE)
dadaRs <- dada(derepRs, err=errR, multithread=TRUE)
dadaFs[[1]]   # number of ASVs on a per sample basis
# Create ASV count table
mergers <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose=TRUE)
seqtab <- makeSequenceTable(mergers)
dim(seqtab)
table(nchar(getSequences(seqtab)))  # distribution of lengths of consensus ASVs, should all be near anticipated amplicon length, e.g. 253 for V4
# Remove Chimeras
seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", multithread=TRUE, verbose=TRUE)     # remove chimeras
dim(seqtab.nochim)  # shows number of samples x number of non-chimera sequences
sum(seqtab.nochim)/sum(seqtab)  # fraction of sequences that are not chimeras
# Summary of number of sequences across all the steps
getN <- function(x) sum(getUniques(x))
track <- cbind(out, sapply(dadaFs, getN), sapply(dadaRs, getN), sapply(mergers, getN), rowSums(seqtab.nochim))
colnames(track) <- c("input", "filtered", "denoisedF", "denoisedR", "merged", "nonchim")
rownames(track) <- sample.names
track
# Assign taxonomy to ASVs using Silva database
taxa <- assignTaxonomy(seqtab.nochim, "C:/Users/Jacobs Laboratory/Desktop/16S_Taxonomy_Classifiers/silva_nr99_v138.1_wSpecies_train_set.fa.gz", multithread=TRUE)
taxa <- addSpecies(taxa, "C:/Users/Jacobs Laboratory/Desktop/16S_Taxonomy_Classifiers/silva_species_assignment_v138.1.fa.gz")
taxa.print <- taxa # Removing sequence rownames for display only
rownames(taxa.print) <- NULL
head(taxa.print)
# Export data so that it can be converted into BIOM
taxa[is.na(taxa)] <- ""
taxonomy<-paste("k__",taxa[,1],"; ","p__",taxa[,2],"; ","c__",taxa[,3],"; ","o__",taxa[,4],"; ","f__",taxa[,5],"; ","g__",taxa[,6],"; ","s__",taxa[,7],sep="")
output<-cbind(t(seqtab.nochim), taxonomy)
uniquesToFasta(seqtab.nochim, fout='C:/Users/Jacobs Laboratory/Documents/JCYang/slcproject/Q22_Microbiome/starting_files/rep_seqs.fna', ids=colnames(seqtab.nochim))
write.table(output, "C:/Users/Jacobs Laboratory/Documents/JCYang/slcproject/Q22_Microbiome/starting_files/Q22_ASV_table_Silva_v138_1.tsv", sep="\t", col.names=NA)
setwd("C:/Users/Jacobs Laboratory/Documents/JCYang/pdbehavior/")
data <- read.csv("Analysis_Files/SMT/Fecal Pellet Output (SMT) - Total_FP_output.csv",header=TRUE)
data_long <- pivot_longer(data,
cols = starts_with("X"),
names_to = "timepoint",
values_to = "FP_output")
library(ggplot2)
library(dplyr)
library(cowplot)
library(nlme)
library(tidyr)
data_long <- pivot_longer(data,
cols = starts_with("X"),
names_to = "timepoint",
values_to = "FP_output")
data_long$timepoint <- as.integer(stringr::str_extract(data_long$timepoint, "\\d+"))
data_long$SLC_Genotype <- factor(data_long$SLC_Genotype, levels=c("WT", "HET", "MUT"))
data_long$timepoint <- factor(data_long$timepoint)
## Plots --
one_hour <- data_long %>% filter(timepoint==60)
generate_boxplots(one_hour,SLC_Genotype,FP_output,0, 20) +
facet_wrap(~Sex)+
ggtitle("Tg Positive")
df_summary <- data_long %>%
group_by(SLC_Genotype, timepoint) %>%
summarise(mean = mean(FP_output),
sd = sd(FP_output),
se = sd / sqrt(n()))
# Plot the graph with error bars
slc_genotype <- ggplot(df_summary, aes(x = timepoint, y = mean, group = SLC_Genotype, color = SLC_Genotype)) +
geom_line(size=2) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se), width = 0.2) +
labs(x = "Time (minutes)", y = "FP_output") +
scale_color_viridis_d()  +
theme_cowplot(16) +
ggtitle("SLC Genotype: PFF FP output over time") +
theme(legend.position = "top", legend.justification="center",legend.title = element_text(hjust = 0.5))+
theme(plot.title = element_text(hjust = 0.5))
df_summary <- data_long %>%
group_by(SLC_Genotype, timepoint) %>%
summarise(mean = mean(FP_output),
sd = sd(FP_output),
se = sd / sqrt(n()))
data <- read.csv("Analysis_Files/SMT/Fecal Pellet Output (SMT) - Total_FP_output.csv",header=TRUE)
data_long <- pivot_longer(data,
cols = starts_with("X"),
names_to = "timepoint",
values_to = "FP_output")
data_long$timepoint <- as.integer(stringr::str_extract(data_long$timepoint, "\\d+"))
data_long$SLC_Genotype <- factor(data_long$SLC_Genotype, levels=c("WT", "HET", "MUT"))
data_long$timepoint <- factor(data_long$timepoint)
df_summary <- data_long %>%
group_by(SLC_Genotype, timepoint) %>%
summarise(mean = mean(FP_output),
sd = sd(FP_output),
se = sd / sqrt(n()))
# Plot the graph with error bars
slc_genotype <- ggplot(df_summary, aes(x = timepoint, y = mean, group = SLC_Genotype, color = SLC_Genotype)) +
geom_line(size=2) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se), width = 0.2) +
labs(x = "Time (minutes)", y = "FP_output") +
scale_color_viridis_d()  +
theme_cowplot(16) +
ggtitle("SLC Genotype: PFF FP output over time") +
theme(legend.position = "top", legend.justification="center",legend.title = element_text(hjust = 0.5))+
theme(plot.title = element_text(hjust = 0.5))
slc_genotype
# Plot the graph with error bars
slc_genotype <- ggplot(df_summary, aes(x = timepoint, y = mean, group = SLC_Genotype, color = SLC_Genotype)) +
geom_line(size=2) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se), width = 0.2) +
labs(x = "Time (minutes)", y = "FP_output") +
scale_color_viridis_d()  +
theme_cowplot(16) +
ggtitle("SMT: FP output over time") +
theme(legend.position = "top", legend.justification="center",legend.title = element_text(hjust = 0.5))+
theme(plot.title = element_text(hjust = 0.5))
# Calculate the mean and standard error for each group -- Females
female <- data_long %>% filter(Sex=="Female")
female_df_summary <- female %>%
group_by(SLC_Genotype, timepoint) %>%
summarise(mean = mean(FP_output),
sd = sd(FP_output),
se = sd / sqrt(n()))
# Plot the graph with error bars
femaleplot <- ggplot(female_df_summary, aes(x = timepoint, y = mean, group = SLC_Genotype, color = SLC_Genotype)) +
geom_line(size=2) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se), width = 0.2) +
labs(x = "Time (minutes)", y = "FP_output") +
scale_color_viridis_d()  +
theme_cowplot(16) +
ggtitle("PFF Females")+
theme(legend.position = "none")+
theme(plot.title = element_text(hjust = 0.5))
# Calculate the mean and standard error for each group -- Males
male <- data_long %>% filter(Sex=="Male")
male_df_summary <- male %>%
group_by(SLC_Genotype, timepoint) %>%
summarise(mean = mean(FP_output),
sd = sd(FP_output),
se = sd / sqrt(n()))
# Plot the graph with error bars
male_plot <- ggplot(male_df_summary, aes(x = timepoint, y = mean, group = SLC_Genotype, color = SLC_Genotype)) +
geom_line(size=2) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se), width = 0.2) +
labs(x = "Time (minutes)", y = "FP_output") +
scale_color_viridis_d()  +
theme_cowplot(16) +
ggtitle("PFF Males") +
theme(legend.position = "none")+
theme(plot.title = element_text(hjust = 0.5))
femaleplot
male_plot
# Calculate the mean and standard error for each group -- Females
female <- data_long %>% filter(Sex=="Female")
female_df_summary <- female %>%
group_by(SLC_Genotype, timepoint) %>%
summarise(mean = mean(FP_output),
sd = sd(FP_output),
se = sd / sqrt(n()))
# Plot the graph with error bars
femaleplot <- ggplot(female_df_summary, aes(x = timepoint, y = mean, group = SLC_Genotype, color = SLC_Genotype)) +
geom_line(size=2) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se), width = 0.2) +
labs(x = "Time (minutes)", y = "FP_output") +
scale_color_viridis_d()  +
theme_cowplot(16) +
ggtitle("SMT Females")+
theme(legend.position = "none")+
theme(plot.title = element_text(hjust = 0.5))
# Calculate the mean and standard error for each group -- Males
male <- data_long %>% filter(Sex=="Male")
male_df_summary <- male %>%
group_by(SLC_Genotype, timepoint) %>%
summarise(mean = mean(FP_output),
sd = sd(FP_output),
se = sd / sqrt(n()))
# Plot the graph with error bars
male_plot <- ggplot(male_df_summary, aes(x = timepoint, y = mean, group = SLC_Genotype, color = SLC_Genotype)) +
geom_line(size=2) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se), width = 0.2) +
labs(x = "Time (minutes)", y = "FP_output") +
scale_color_viridis_d()  +
theme_cowplot(16) +
ggtitle("SMT Males") +
theme(legend.position = "none")+
theme(plot.title = element_text(hjust = 0.5))
male_plot
## Final Figure --
plot_grid(slc_genotype,female_plot,male_plot,nrow=1)
## Final Figure --
plot_grid(slc_genotype,femaleplot,male_plot,nrow=1)
lm1<- lme(fixed= FP_output ~ timepoint +Sex + SLC_Genotype, random = ~1|MouseID, data=data_long)
summary(lm1)
View(data_long)
lm1<- lme(fixed= FP_output ~ timepoint +Sex + SLC_Genotype, random = ~1|Mouse, data=data_long)
summary(lm1)
lm1_time_ASO<- lme(fixed= FP_output ~ timepoint*SLC_Genotype + Sex, random = ~1|MouseID, data=data_long)
summary(lm1_time_ASO)
lm1_time_ASO<- lme(fixed= FP_output ~ timepoint*SLC_Genotype + Sex, random = ~1|Mouse, data=data_long)
summary(lm1_time_ASO)
males <- data_long %>% filter(Sex=="Male")
females <- data_long %>% filter(Sex=="Female")
lm4 <- lme(fixed= FP_output ~ timepoint*SLC_Genotype, random = ~1|Mouse, data=males)
summary(lm4)
lm5 <- lme(fixed= FP_output ~ timepoint*SLC_Genotype, random = ~1|Mouse, data=females)
summary(lm5)
lm1_time_ASO<- lme(fixed= FP_output ~ timepoint*SLC_Genotype + Sex, random = ~1|Mouse, data=data_long)
summary(lm1_time_ASO)
males <- data_long %>% filter(Sex=="Male")
females <- data_long %>% filter(Sex=="Female")
lm4 <- lme(fixed= FP_output ~ timepoint*SLC_Genotype, random = ~1|Mouse, data=males)
summary(lm4)
lm1 <- lm(FP_output ~ Sex + ASO_Tg +SLC_Genotype,  subset(data_long, timepoint == 60))
summary(lm1)
data <- read.csv("Analysis_Files/SMT/Fecal Pellet Output (SMT) - Total_FP_output.csv",header=TRUE)
data_long <- pivot_longer(data,
cols = starts_with("X"),
names_to = "timepoint",
values_to = "FP_output")
data_long$timepoint <- as.integer(stringr::str_extract(data_long$timepoint, "\\d+"))
data_long$SLC_Genotype <- factor(data_long$SLC_Genotype, levels=c("WT", "HET", "MUT"))
data_long$timepoint <- factor(data_long$timepoint)
# Calculate the mean and standard error for each group -- Females
female <- data_long %>% filter(Sex=="Female")
female_df_summary <- female %>%
group_by(Cohort,SLC_Genotype, timepoint) %>%
summarise(mean = mean(FP_output),
sd = sd(FP_output),
se = sd / sqrt(n()))
# Plot the graph with error bars
femaleplot <- ggplot(female_df_summary, aes(x = timepoint, y = mean, group = SLC_Genotype, color = SLC_Genotype)) +
geom_line(size=2) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se), width = 0.2) +
labs(x = "Time (minutes)", y = "FP_output") +
scale_color_viridis_d()  +
theme_cowplot(16) +
ggtitle("SMT Females")+
theme(legend.position = "none")+
theme(plot.title = element_text(hjust = 0.5))+
facet_wrap(~Cohort)
femaleplot
# Calculate the mean and standard error for each group -- Males
male <- data_long %>% filter(Sex=="Male")
male_df_summary <- male %>%
group_by(Cohort,SLC_Genotype, timepoint) %>%
summarise(mean = mean(FP_output),
sd = sd(FP_output),
se = sd / sqrt(n()))
# Plot the graph with error bars
male_plot <- ggplot(male_df_summary, aes(x = timepoint, y = mean, group = SLC_Genotype, color = SLC_Genotype)) +
geom_line(size=2) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se), width = 0.2) +
labs(x = "Time (minutes)", y = "FP_output") +
scale_color_viridis_d()  +
theme_cowplot(16) +
ggtitle("SMT Males") +
theme(legend.position = "none")+
theme(plot.title = element_text(hjust = 0.5))+
facet_wrap(~Cohort)
male_plot
